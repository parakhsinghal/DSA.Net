//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataStructures.ErrorMessages {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class ErrorMessages_US_en {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal ErrorMessages_US_en() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("DataStructures.ErrorMessages.ErrorMessages_US-en", typeof(ErrorMessages_US_en).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The passed node to be added is not valid.
        /// </summary>
        public static string Array_Push_IsValid {
            get {
                return ResourceManager.GetString("Array_Push_IsValid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The tree is empty. You cannot delete anything from an empty tree..
        /// </summary>
        public static string AVLTree_Deletion_Empty {
            get {
                return ResourceManager.GetString("AVLTree_Deletion_Empty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The tree does not contain the node that is desired to be deleted..
        /// </summary>
        public static string AVLTree_Deletion_NodeNotFound {
            get {
                return ResourceManager.GetString("AVLTree_Deletion_NodeNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Insertion of a value already present in the tree is not allowed..
        /// </summary>
        public static string AVLTree_Insert_EqualValue {
            get {
                return ResourceManager.GetString("AVLTree_Insert_EqualValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value intended to be inserted cannot be null..
        /// </summary>
        public static string AVLTree_Insert_NullValue {
            get {
                return ResourceManager.GetString("AVLTree_Insert_NullValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The tree is empty. You cannot run search operation on an empty tree..
        /// </summary>
        public static string AVLTree_Search_EmptyTree {
            get {
                return ResourceManager.GetString("AVLTree_Search_EmptyTree", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The heap is empty. Cannot sort an empty heap..
        /// </summary>
        public static string BinaryHeap_GetElementsInOrder_EmptyHeap {
            get {
                return ResourceManager.GetString("BinaryHeap_GetElementsInOrder_EmptyHeap", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Insertion of a duplicate element is not allowed..
        /// </summary>
        public static string BinaryHeap_Insert_DuplicateElement {
            get {
                return ResourceManager.GetString("BinaryHeap_Insert_DuplicateElement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The element that needs to be inserted cannot be null..
        /// </summary>
        public static string BinaryHeap_Insert_NullElement {
            get {
                return ResourceManager.GetString("BinaryHeap_Insert_NullElement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The maximum element cannot be obtained since the heap is empty..
        /// </summary>
        public static string BinaryHeap_Max_EmptyHeap {
            get {
                return ResourceManager.GetString("BinaryHeap_Max_EmptyHeap", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The minimum element cannot be obtained since the heap is empty..
        /// </summary>
        public static string BinaryHeap_Min_EmptyHeap {
            get {
                return ResourceManager.GetString("BinaryHeap_Min_EmptyHeap", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The element that needs to be removed was not found in the heap..
        /// </summary>
        public static string BinaryHeap_Remove_ElementNotFound {
            get {
                return ResourceManager.GetString("BinaryHeap_Remove_ElementNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The heap is empty. Element cannot be removed from an empty heap..
        /// </summary>
        public static string BinaryHeap_Remove_EmptyHeap {
            get {
                return ResourceManager.GetString("BinaryHeap_Remove_EmptyHeap", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The root cannot be obtained since the heap is empty..
        /// </summary>
        public static string BinaryHeap_Root_EmptyHeap {
            get {
                return ResourceManager.GetString("BinaryHeap_Root_EmptyHeap", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One or both the supplied indexes are either less than zero or outside of the bounds of the underlying data store..
        /// </summary>
        public static string BinaryHeap_Swap_IndexOutOfRange {
            get {
                return ResourceManager.GetString("BinaryHeap_Swap_IndexOutOfRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The tree is empty. You cannot delete anything from an empty tree..
        /// </summary>
        public static string BinarySearchTree_Deletion_Empty {
            get {
                return ResourceManager.GetString("BinarySearchTree_Deletion_Empty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The tree does not contain the node that is desired to be deleted..
        /// </summary>
        public static string BinarySearchTree_Deletion_NodeNotFound {
            get {
                return ResourceManager.GetString("BinarySearchTree_Deletion_NodeNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Insertion of a value already present in the tree is not allowed..
        /// </summary>
        public static string BinarySearchTree_Insert_EqualValue {
            get {
                return ResourceManager.GetString("BinarySearchTree_Insert_EqualValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value intended to be inserted cannot be null..
        /// </summary>
        public static string BinarySearchTree_Insert_NullValue {
            get {
                return ResourceManager.GetString("BinarySearchTree_Insert_NullValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The tree is empty. You cannot run search operation on an empty tree..
        /// </summary>
        public static string BinarySearchTree_Search_EmptyTree {
            get {
                return ResourceManager.GetString("BinarySearchTree_Search_EmptyTree", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The linked list is empty, hence addition of the desired element adjacent to the provided element is not possible..
        /// </summary>
        public static string LinkedList_AddAfter_EmptyList {
            get {
                return ResourceManager.GetString("LinkedList_AddAfter_EmptyList", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The neighbour of the desired addition was not found..
        /// </summary>
        public static string LinkedList_AddAfter_NeighborNodeNotFound {
            get {
                return ResourceManager.GetString("LinkedList_AddAfter_NeighborNodeNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The linked list is empty, hence a search cannot be carried out..
        /// </summary>
        public static string LinkedList_Contains_EmptyList {
            get {
                return ResourceManager.GetString("LinkedList_Contains_EmptyList", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The passed array is not having sufficient length to accomodate the members of the linked list, or the passed index is wrong..
        /// </summary>
        public static string LinkedList_CopyTo_InvalidArguments {
            get {
                return ResourceManager.GetString("LinkedList_CopyTo_InvalidArguments", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The linked list is empty..
        /// </summary>
        public static string LinkedList_Peek_EmptyList {
            get {
                return ResourceManager.GetString("LinkedList_Peek_EmptyList", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The linked list is already empty, hence nothing can be removed..
        /// </summary>
        public static string LinkedList_Remove_EmptyList {
            get {
                return ResourceManager.GetString("LinkedList_Remove_EmptyList", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The linked list is empty with no head present to be removed..
        /// </summary>
        public static string LinkedList_RemoveHead_EmptyList {
            get {
                return ResourceManager.GetString("LinkedList_RemoveHead_EmptyList", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The linked list is empty with no tail to be removed..
        /// </summary>
        public static string LinkedList_RemoveTail_EmptyList {
            get {
                return ResourceManager.GetString("LinkedList_RemoveTail_EmptyList", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The passed node to be added is not valid..
        /// </summary>
        public static string Node_IsValid_IsNotValid {
            get {
                return ResourceManager.GetString("Node_IsValid_IsNotValid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The queue is already empty..
        /// </summary>
        public static string Queue_Dequeue_EmptyQueue {
            get {
                return ResourceManager.GetString("Queue_Dequeue_EmptyQueue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The index of the backing array is out of room to accmmodate the passed value..
        /// </summary>
        public static string Queue_Enqueue_IndexOutOfRange {
            get {
                return ResourceManager.GetString("Queue_Enqueue_IndexOutOfRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The passed value is null. Please pass an appropriate value..
        /// </summary>
        public static string Queue_Enqueue_ValueIsNotValid {
            get {
                return ResourceManager.GetString("Queue_Enqueue_ValueIsNotValid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The tree is empty. You cannot delete anything from an empty tree..
        /// </summary>
        public static string SplayTree_Deletion_Empty {
            get {
                return ResourceManager.GetString("SplayTree_Deletion_Empty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Insertion of a value already present in the tree is not allowed..
        /// </summary>
        public static string SplayTree_Insert_EqualValue {
            get {
                return ResourceManager.GetString("SplayTree_Insert_EqualValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value intended to be inserted cannot be null..
        /// </summary>
        public static string SplayTree_Insert_NullValue {
            get {
                return ResourceManager.GetString("SplayTree_Insert_NullValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The tree is empty. You cannot run search operation on an empty tree..
        /// </summary>
        public static string SplayTree_Search_EmptyTree {
            get {
                return ResourceManager.GetString("SplayTree_Search_EmptyTree", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One or both the arguments supplied are invalid. Please provide a valid argument(s)..
        /// </summary>
        public static string UnweightedGraph_AddEdge_ArgumentInvalid {
            get {
                return ResourceManager.GetString("UnweightedGraph_AddEdge_ArgumentInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One or both the vertices provided to form an edge are not available in the list of available vertices. Please add them first before forming an edge between them..
        /// </summary>
        public static string UnweightedGraph_AddEdge_ArgumentNotAvailable {
            get {
                return ResourceManager.GetString("UnweightedGraph_AddEdge_ArgumentNotAvailable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The number of vertices available in the graph are zero. Thus we cannot perform a depth first traversal along the edges..
        /// </summary>
        public static string UnweightedGraph_DFS_EmptyVertices {
            get {
                return ResourceManager.GetString("UnweightedGraph_DFS_EmptyVertices", resourceCulture);
            }
        }
    }
}
