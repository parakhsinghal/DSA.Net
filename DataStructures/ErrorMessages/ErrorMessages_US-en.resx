<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Array_Push_IsValid" xml:space="preserve">
    <value>The passed node to be added is not valid</value>
    <comment>The error message needs to be presented when an attempt is made to add a null value to an array.</comment>
  </data>
  <data name="AVLTree_Deletion_Empty" xml:space="preserve">
    <value>The tree is empty. You cannot delete anything from an empty tree.</value>
    <comment>The error message needs to be presented when an attempt is made to delete an entry from an empty tree.</comment>
  </data>
  <data name="AVLTree_Deletion_NodeNotFound" xml:space="preserve">
    <value>The tree does not contain the node that is desired to be deleted.</value>
    <comment>The error message needs to be presented when an attempt is made to delete a node from a tree that is not available in the tree.</comment>
  </data>
  <data name="AVLTree_Insert_EqualValue" xml:space="preserve">
    <value>Insertion of a value already present in the tree is not allowed.</value>
    <comment>The error message needs to be presented when an attempt is made to add a duplicate value to the binary search tree.</comment>
  </data>
  <data name="AVLTree_Insert_NullValue" xml:space="preserve">
    <value>The value intended to be inserted cannot be null.</value>
    <comment>The error message needs to be presented when an attempt is made to insert a null value in the tree.</comment>
  </data>
  <data name="AVLTree_Search_EmptyTree" xml:space="preserve">
    <value>The tree is empty. You cannot run search operation on an empty tree.</value>
    <comment>The error message needs to be presented when an attempt is made to run a search on an empty binary search tree.</comment>
  </data>
  <data name="BinaryHeap_Insert_DuplicateElement" xml:space="preserve">
    <value>Insertion of a duplicate element is not allowed.</value>
    <comment>The error message needs to be presented when an attempt is made to insert a duplicate element in the underlying binary heap.</comment>
  </data>
  <data name="BinaryHeap_Insert_NullElement" xml:space="preserve">
    <value>The element that needs to be inserted cannot be null.</value>
    <comment>The error message needs to be presented when an attempt is made to insert a null value in the binary heap.</comment>
  </data>
  <data name="BinaryHeap_Max_EmptyHeap" xml:space="preserve">
    <value>The maximum element cannot be obtained since the heap is empty.</value>
    <comment>The error message needs to be presented when an attempt is made to extract a maximum element from an empty heap.</comment>
  </data>
  <data name="BinaryHeap_Min_EmptyHeap" xml:space="preserve">
    <value>The minimum element cannot be obtained since the heap is empty.</value>
    <comment>The error message needs to be presented when an attempt is made to extract a minimum element from an empty heap.</comment>
  </data>
  <data name="BinaryHeap_Remove_ElementNotFound" xml:space="preserve">
    <value>The element that needs to be removed was not found in the heap.</value>
    <comment>The error message needs to be presented when an attempt is made to remove an element from the heap and is not found to be available in the heap.</comment>
  </data>
  <data name="BinaryHeap_Remove_EmptyHeap" xml:space="preserve">
    <value>The heap is empty. Element cannot be removed from an empty heap.</value>
    <comment>The error message needs to be presented when an attempt is made to remove an element from an empty heap.</comment>
  </data>
  <data name="BinaryHeap_Root_EmptyHeap" xml:space="preserve">
    <value>The root cannot be obtained since the heap is empty.</value>
    <comment>The error message needs to be presented when an attempt is made to access root element from an empty heap.</comment>
  </data>
  <data name="BinaryHeap_Swap_IndexOutOfRange" xml:space="preserve">
    <value>One or both the supplied indexes are either less than zero or outside of the bounds of the underlying data store.</value>
    <comment>The error message needs to be presented when an attempt is made to supply one or both the indexes that are either less than zero or greater than the count of elements of the underlying list.</comment>
  </data>
  <data name="BinarySearchTree_Deletion_Empty" xml:space="preserve">
    <value>The tree is empty. You cannot delete anything from an empty tree.</value>
    <comment>The error message needs to be presented when an attempt is made to delete an entry from an empty tree.</comment>
  </data>
  <data name="BinarySearchTree_Deletion_NodeNotFound" xml:space="preserve">
    <value>The tree does not contain the node that is desired to be deleted.</value>
    <comment>The error message needs to be presented when an attempt is made to delete a node from a tree that is not available in the tree.</comment>
  </data>
  <data name="BinarySearchTree_Insert_EqualValue" xml:space="preserve">
    <value>Insertion of a value already present in the tree is not allowed.</value>
    <comment>The error message needs to be presented when an attempt is made to add a duplicate value to the binary search tree.</comment>
  </data>
  <data name="BinarySearchTree_Insert_NullValue" xml:space="preserve">
    <value>The value intended to be inserted cannot be null.</value>
    <comment>The error message needs to be presented when an attempt is made to insert a null value in the tree.</comment>
  </data>
  <data name="BinarySearchTree_Search_EmptyTree" xml:space="preserve">
    <value>The tree is empty. You cannot run search operation on an empty tree.</value>
    <comment>The error message needs to be presented when an attempt is made to run a search on an empty binary search tree.</comment>
  </data>
  <data name="LinkedList_AddAfter_EmptyList" xml:space="preserve">
    <value>The linked list is empty, hence addition of the desired element adjacent to the provided element is not possible.</value>
    <comment>The error message needs to be presented when an attempt is made to add an element adjacent to another element, when the list is empty to begin with.</comment>
  </data>
  <data name="LinkedList_AddAfter_NeighborNodeNotFound" xml:space="preserve">
    <value>The neighbour of the desired addition was not found.</value>
    <comment>The error message needs to presented when the neighbor to which an addition is desired is not found.</comment>
  </data>
  <data name="LinkedList_Contains_EmptyList" xml:space="preserve">
    <value>The linked list is empty, hence a search cannot be carried out.</value>
    <comment>The error message needs to be presented when an attempt is made to search for a value in an empty list.</comment>
  </data>
  <data name="LinkedList_CopyTo_InvalidArguments" xml:space="preserve">
    <value>The passed array is not having sufficient length to accomodate the members of the linked list, or the passed index is wrong.</value>
  </data>
  <data name="LinkedList_Peek_EmptyList" xml:space="preserve">
    <value>The linked list is empty.</value>
    <comment>The error message needs to be presented when an attempt is made to peek into an empty linked list.</comment>
  </data>
  <data name="LinkedList_RemoveHead_EmptyList" xml:space="preserve">
    <value>The linked list is empty with no head present to be removed.</value>
    <comment>The error message needs to be presented when an attempt is made to delete a head when the list is empty.</comment>
  </data>
  <data name="LinkedList_RemoveTail_EmptyList" xml:space="preserve">
    <value>The linked list is empty with no tail to be removed.</value>
    <comment>The error message needs to be presented when an attempt is made to delete a tail when the list is empty.</comment>
  </data>
  <data name="LinkedList_Remove_EmptyList" xml:space="preserve">
    <value>The linked list is already empty, hence nothing can be removed.</value>
    <comment>The error message needs to be presented when an attempt is made to remove an item from an empty list.</comment>
  </data>
  <data name="Node_IsValid_IsNotValid" xml:space="preserve">
    <value>The passed node to be added is not valid.</value>
    <comment>The error message needs to be presented when an attempt is made to add a null node to a linked list.</comment>
  </data>
  <data name="Queue_Dequeue_EmptyQueue" xml:space="preserve">
    <value>The queue is already empty.</value>
    <comment>The error message needs to be presented when an attempt is made to dequeue an element an empty queue.</comment>
  </data>
  <data name="Queue_Enqueue_IndexOutOfRange" xml:space="preserve">
    <value>The index of the backing array is out of room to accmmodate the passed value.</value>
    <comment>The error message needs to be presented when an attampt is made to add a value to an array backed queue which is out of range to accommodate it.</comment>
  </data>
  <data name="Queue_Enqueue_ValueIsNotValid" xml:space="preserve">
    <value>The passed value is null. Please pass an appropriate value.</value>
    <comment>The error messag needs to be presented when an attempt is made to add a null value to the backing array of a queue.</comment>
  </data>
  <data name="SplayTree_Deletion_Empty" xml:space="preserve">
    <value>The tree is empty. You cannot delete anything from an empty tree.</value>
    <comment>The error message needs to be presented when an attempt is made to delete an entry from an empty tree.</comment>
  </data>
  <data name="SplayTree_Insert_EqualValue" xml:space="preserve">
    <value>Insertion of a value already present in the tree is not allowed.</value>
    <comment>The error message needs to be presented when an attempt is made to add a duplicate value to the binary search tree.</comment>
  </data>
  <data name="SplayTree_Insert_NullValue" xml:space="preserve">
    <value>The value intended to be inserted cannot be null.</value>
    <comment>The error message needs to be presented when an attempt is made to insert a null value in the tree.</comment>
  </data>
  <data name="SplayTree_Search_EmptyTree" xml:space="preserve">
    <value>The tree is empty. You cannot run search operation on an empty tree.</value>
    <comment>The error message needs to be presented when an attempt is made to run a search on an empty binary search tree.</comment>
  </data>
</root>